@page
@model IndexModel
@{
    ViewData["Title"] = "ICRISAT Subsetting Tool Page";
}

<div class="page-container">
    <header>
        <div class="logo">Logo? Empty?</div>
        <h1>ICRISAT Subsetting Tool Page</h1>
    </header>

    <div class="content-wrapper">
        <!-- Left Sidebar -->
        <aside class="sidebar">
            <div class="filter-section">
                <h2>Apply Filters</h2>
                <form method="post">
                    <div class="manual-filters">
                        <h3>Manual Filters</h3>
                        <div class="weather-form">
                            <!-- Temperature Range -->
                            <div class="range_container">
                                <label>Temperature Range (°C)</label>
                                <div class="sliders_control">
                                    <input id="tempFromSlider" type="range" name="TempMin" value="@Model.TempMin" min="-50" max="50" />
                                    <input id="tempToSlider" type="range" name="TempMax" value="@Model.TempMax" min="-50" max="50" />
                                </div>
                                <div class="form_control">
                                    <div class="form_control_container">
                                        <div class="form_control_container__time">Min</div>
                                        <input class="form_control_container__time__input" type="number" name="TempMin" id="tempFromInput" value="@Model.TempMin" min="-50" max="50" />
                                    </div>
                                    <div class="form_control_container">
                                        <div class="form_control_container__time">Max</div>
                                        <input class="form_control_container__time__input" type="number" name="TempMax" id="tempToInput" value="@Model.TempMax" min="-50" max="50" />
                                    </div>
                                </div>
                            </div>

                            <!-- Humidity Range -->
                            <div class="range_container">
                                <label>Humidity Range (%)</label>
                                <div class="sliders_control">
                                    <input id="humidityFromSlider" type="range" name="HumidityMin" value="@Model.HumidityMin" min="0" max="100" />
                                    <input id="humidityToSlider" type="range" name="HumidityMax" value="@Model.HumidityMax" min="0" max="100" />
                                </div>
                                <div class="form_control">
                                    <div class="form_control_container">
                                        <div class="form_control_container__time">Min</div>
                                        <input class="form_control_container__time__input" type="number" name="HumidityMin" id="humidityFromInput" value="@Model.HumidityMin" min="0" max="100" />
                                    </div>
                                    <div class="form_control_container">
                                        <div class="form_control_container__time">Max</div>
                                        <input class="form_control_container__time__input" type="number" name="HumidityMax" id="humidityToInput" value="@Model.HumidityMax" min="0" max="100" />
                                    </div>
                                </div>
                            </div>

                            <!-- Rainfall Range -->
                            <div class="range_container">
                                <label>Rainfall Range (mm)</label>
                                <div class="sliders_control">
                                    <input id="rainFromSlider" type="range" name="RainfallMin" value="@Model.RainfallMin" min="0" max="200" />
                                    <input id="rainToSlider" type="range" name="RainfallMax" value="@Model.RainfallMax" min="0" max="200" />
                                </div>
                                <div class="form_control">
                                    <div class="form_control_container">
                                        <div class="form_control_container__time">Min</div>
                                        <input class="form_control_container__time__input" type="number" name="RainfallMin" id="rainFromInput" value="@Model.RainfallMin" min="0" max="200" />
                                    </div>
                                    <div class="form_control_container">
                                        <div class="form_control_container__time">Max</div>
                                        <input class="form_control_container__time__input" type="number" name="RainfallMax" id="rainToInput" value="@Model.RainfallMax" min="0" max="200" />
                                    </div>
                                </div>
                            </div>

                            <!-- Submit Button -->
                            <button type="submit" class="submit-button">Submit</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="chatbot-section">
                <button class="chatbot-button">Chatbot</button>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <h2>Display Data</h2>
            <p>Debug: Number of passport records received: @Model.PassportResults?.Count ?? 0</p>
            @if (Model.PassportResults != null && Model.PassportResults.Any())
            {
                <p>Showing page @Model.PageIndex of @Model.TotalPages (Total Records: @Model.TotalRecords)</p>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>ICRISAT Accession Identifier</th>
                            <th>Accession Identifier</th>
                            <th>Crop</th>
                            <th>DOI</th>
                            <th>Local Name</th>
                            <th>Genus</th>
                            <th>Species</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var passport in Model.PassportResults)
                        {
                            <tr>
                                <td>@passport.ICRISATAccessionIdentifier</td>
                                <td>@passport.AccessionIdentifier</td>
                                <td>@passport.Crop</td>
                                <td>@passport.DOI</td>
                                <td>@passport.LocalName</td>
                                <td>@passport.Genus</td>
                                <td>@passport.Species</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="pagination">
                    @if (Model.PageIndex > 1)
                    {
                        <a asp-page="Index" asp-route-pageIndex="@(Model.PageIndex - 1)" asp-route-TempMin="@Model.TempMin" asp-route-TempMax="@Model.TempMax" asp-route-HumidityMin="@Model.HumidityMin" asp-route-HumidityMax="@Model.HumidityMax" asp-route-RainfallMin="@Model.RainfallMin" asp-route-RainfallMax="@Model.RainfallMax" class="btn btn-secondary">Previous</a>
                    }
                    @if (Model.PageIndex < Model.TotalPages)
                    {
                        <a asp-page="Index" asp-route-pageIndex="@(Model.PageIndex + 1)" asp-route-TempMin="@Model.TempMin" asp-route-TempMax="@Model.TempMax" asp-route-HumidityMin="@Model.HumidityMin" asp-route-HumidityMax="@Model.HumidityMax" asp-route-RainfallMin="@Model.RainfallMin" asp-route-RainfallMax="@Model.RainfallMax" class="btn btn-secondary">Next</a>
                    }
                </div>
            }
            else
            {
                <p>No passport data available.</p>
            }
        </main>
    </div>
</div>

<style>
    /* General Layout */
    .page-container {
        font-family: Arial, sans-serif;
    }

    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #e6f0fa;
        padding: 10px 20px;
        border-bottom: 1px solid #ccc;
    }

    .logo {
        font-size: 14px;
        color: #333;
    }

    header h1 {
        font-size: 24px;
        margin: 0;
    }

    .content-wrapper {
        display: flex;
        min-height: calc(100vh - 60px);
    }

    /* Sidebar */
    .sidebar {
        width: 25%;
        background-color: #f0f7fd;
        padding: 20px;
        border-right: 1px solid #ccc;
    }

    .filter-section h2 {
        font-size: 20px;
        margin-bottom: 15px;
    }

    .manual-filters h3 {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .chatbot-section {
        margin-top: 20px;
    }

    .chatbot-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 50%;
        font-size: 16px;
        cursor: pointer;
    }

        .chatbot-button:hover {
            background-color: #0056b3;
        }

    .submit-button {
        display: block;
        width: 100%;
        padding: 10px;
        margin-top: 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }

        .submit-button:hover {
            background-color: #218838;
        }

    /* Main Content */
    .main-content {
        width: 75%;
        padding: 20px;
        background-color: #e6f0fa;
    }

        .main-content h2 {
            font-size: 20px;
            text-align: center;
            margin-bottom: 20px;
        }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .data-table th, .data-table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
            word-wrap: break-word;
            max-width: 150px;
        }

        .data-table th {
            background-color: #f0f7fd;
            font-weight: bold;
        }

    .pagination {
        margin-top: 15px;
    }

    .btn {
        padding: 5px 10px;
        margin-right: 5px;
        text-decoration: none;
        color: white;
        background-color: #007bff;
        border: 1px solid #007bff;
        border-radius: 4px;
    }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .btn:hover {
        background-color: #0056b3;
        text-decoration: none;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
    }

    /* Range Slider Styles */
    .weather-form {
        margin-top: 20px;
    }

    .range_container {
        display: flex;
        flex-direction: column;
        margin: 20px 0;
    }

    .sliders_control {
        position: relative;
        min-height: 50px;
    }

    .form_control {
        position: relative;
        display: flex;
        justify-content: space-between;
        font-size: 16px;
        color: #635a5a;
    }

    label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 24px;
        height: 24px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    input[type=range]::-moz-range-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 24px;
        height: 24px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    input[type=range]::-webkit-slider-thumb:hover {
        background: #f7f7f7;
    }

    input[type=range]::-webkit-slider-thumb:active {
        box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    }

    input[type="number"] {
        color: #8a8383;
        width: 60px;
        height: 30px;
        font-size: 16px;
        border: none;
    }

    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        opacity: 1;
    }

    input[type="range"] {
        -webkit-appearance: none;
        appearance: none;
        height: 2px;
        width: 100%;
        position: absolute;
        background-color: #C6C6C6;
        pointer-events: none;
    }

    #tempFromSlider, #rainFromSlider, #humidityFromSlider {
        height: 0;
        z-index: 1;
    }
</style>

<script>
    // Generic control functions
    function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        const min = parseFloat(fromInput.min);
        const max = parseFloat(fromInput.max);

        let clampedFrom = Math.max(min, Math.min(max, from));
        if (isNaN(clampedFrom)) clampedFrom = min;

        fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
        if (clampedFrom > to) {
            fromSlider.value = to;
            fromInput.value = to;
        } else {
            fromSlider.value = clampedFrom;
            fromInput.value = clampedFrom;
        }
    }

    function controlToInput(toSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        const min = parseFloat(toInput.min);
        const max = parseFloat(toInput.max);

        let clampedTo = Math.max(min, Math.min(max, to));
        if (isNaN(clampedTo)) clampedTo = max;

        fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
        setToggleAccessible(toInput);
        if (from <= clampedTo) {
            toSlider.value = clampedTo;
            toInput.value = clampedTo;
        } else {
            toInput.value = from;
        }
    }

    function controlFromSlider(fromSlider, toSlider, fromInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        const min = parseFloat(fromSlider.min);
        const max = parseFloat(fromSlider.max);

        let clampedFrom = Math.max(min, Math.min(max, from));
        if (isNaN(clampedFrom)) clampedFrom = min;

        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
        if (clampedFrom > to) {
            fromSlider.value = to;
            fromInput.value = to;
        } else {
            fromInput.value = clampedFrom;
        }
    }

    function controlToSlider(fromSlider, toSlider, toInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        const min = parseFloat(toSlider.min);
        const max = parseFloat(toSlider.max);

        let clampedTo = Math.max(min, Math.min(max, to));
        if (isNaN(clampedTo)) clampedTo = max;

        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
        setToggleAccessible(toSlider);
        if (from <= clampedTo) {
            toSlider.value = clampedTo;
            toInput.value = clampedTo;
        } else {
            toInput.value = from;
            toSlider.value = from;
        }
    }

    function getParsed(currentFrom, currentTo) {
        const from = parseFloat(currentFrom.value);
        const to = parseFloat(currentTo.value);
        return [from, to];
    }

    function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
        const rangeDistance = to.max - to.min;
        const fromPosition = from.value - to.min;
        const toPosition = to.value - to.min;
        controlSlider.style.background = `linear-gradient(
                    to right,
                    ${sliderColor} 0%,
                    ${sliderColor} ${(fromPosition / rangeDistance) * 100}%,
                    ${rangeColor} ${(fromPosition / rangeDistance) * 100}%,
                    ${rangeColor} ${(toPosition / rangeDistance) * 100}%,
                    ${sliderColor} ${(toPosition / rangeDistance) * 100}%,
                    ${sliderColor} 100%)`;
    }

    function setToggleAccessible(currentTarget) {
        const toSlider = currentTarget.parentElement.parentElement.querySelector('[id$="ToSlider"]');
        if (Number(currentTarget.value) <= 0) {
            toSlider.style.zIndex = 2;
        } else {
            toSlider.style.zIndex = 0;
        }
    }

    // Initialize Temperature
    const tempFromSlider = document.querySelector('#tempFromSlider');
    const tempToSlider = document.querySelector('#tempToSlider');
    const tempFromInput = document.querySelector('#tempFromInput');
    const tempToInput = document.querySelector('#tempToInput');
    fillSlider(tempFromSlider, tempToSlider, '#C6C6C6', '#25daa5', tempToSlider);
    setToggleAccessible(tempToSlider);
    tempFromSlider.oninput = () => controlFromSlider(tempFromSlider, tempToSlider, tempFromInput);
    tempToSlider.oninput = () => controlToSlider(tempFromSlider, tempToSlider, tempToInput);
    tempFromInput.oninput = () => controlFromInput(tempFromSlider, tempFromInput, tempToInput, tempToSlider);
    tempToInput.oninput = () => controlToInput(tempToSlider, tempFromInput, tempToInput, tempToSlider);

    // Initialize Humidity
    const humidityFromSlider = document.querySelector('#humidityFromSlider');
    const humidityToSlider = document.querySelector('#humidityToSlider');
    const humidityFromInput = document.querySelector('#humidityFromInput');
    const humidityToInput = document.querySelector('#humidityToInput');
    fillSlider(humidityFromSlider, humidityToSlider, '#C6C6C6', '#25daa5', humidityToSlider);
    setToggleAccessible(humidityToSlider);
    humidityFromSlider.oninput = () => controlFromSlider(humidityFromSlider, humidityToSlider, humidityFromInput);
    humidityToSlider.oninput = () => controlToSlider(humidityFromSlider, humidityToSlider, humidityToInput);
    humidityFromInput.oninput = () => controlFromInput(humidityFromSlider, humidityFromInput, humidityToInput, humidityToSlider);
    humidityToInput.oninput = () => controlToInput(humidityToSlider, humidityFromInput, humidityToInput, humidityToSlider);

    // Initialize Rainfall
    const rainFromSlider = document.querySelector('#rainFromSlider');
    const rainToSlider = document.querySelector('#rainToSlider');
    const rainFromInput = document.querySelector('#rainFromInput');
    const rainToInput = document.querySelector('#rainToInput');
    fillSlider(rainFromSlider, rainToSlider, '#C6C6C6', '#25daa5', rainToSlider);
    setToggleAccessible(rainToSlider);
    rainFromSlider.oninput = () => controlFromSlider(rainFromSlider, rainToSlider, rainFromInput);
    rainToSlider.oninput = () => controlToSlider(rainFromSlider, rainToSlider, rainToInput);
    rainFromInput.oninput = () => controlFromInput(rainFromSlider, rainFromInput, rainToInput, rainToSlider);
    rainToInput.oninput = () => controlToInput(rainToSlider, rainFromInput, rainToInput, rainToSlider);
</script>